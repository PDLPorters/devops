name: IRC notifications
inputs:
  repository_owner:
    description: Organization/owner that notifications are triggered for.
    required: true
    default: 'PDLPorters'
  repository:
    description: Repository that notifications are triggered for.
    required: true
    default: ''
  irc-channel:
    required: true
    default: '#pdl'
  irc-server:
    required: true
    default: 'irc.perl.org'
  irc-port:
    required: true
    default: '6667'
  irc-nickname:
    required: true
    default: 'pdl-commits'
  irc-tls:
    required: true
    default: false
  irc-notice:
    required: true
    default: true
  irc-excess-flood:
    required: false
    default: 'throttle'
  needs:
    description: |
      The GitHub Actions `need` context which should be passed
      in using toJSON(). Only required for the
      target-build-status target.
    required: false
  target-notifications:
    description: |
      Flag for target that notifies on various events.
    required: true
    default: false
  target-build-status:
    description: |
      Flag for target that notifies after builds are complete
      and reports the build status (success/failure).
    required: true
    default: false
runs:
  using: "composite"
  steps:
    # actions/checkout of the repo is used by both targets
    # (target-notifications, target-build-status).
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/checkout@v2
      with:
        repository: Gottox/irc-message-action
        ref: v2.1.1
        path: .github/actions/irc-message-action
    - name: Set up environment variables (e.g., IRC colors)
      shell: bash
      run: |
          echo "::group::Setting up environment variables"
          perl -e '
            for (sort grep { /^map_color_/ } keys %ENV) {
              (my $key = $_) =~ s/^map_//;
              my $value = $ENV{ "IRC_CC_" . $ENV{$_} };
              print "$key=$value\n"
            }' >> $GITHUB_ENV
          echo "SHORT_REPO="$( echo "${{ github.repository }}" | sed 's,^${{ inputs.repository_owner }}/,,' ) >> $GITHUB_ENV
          echo "::endgroup::"
      env:
        # IRC color codes
        # From <https://metacpan.org/pod/IRC::Toolkit::Colors>.
        IRC_CC_NORMAL      : "\x0f"
        IRC_CC_BOLD        : "\x02"
        IRC_CC_UNDERLINE   : "\x1f"
        IRC_CC_REVERSE     : "\x16"
        IRC_CC_ITALIC      : "\x1d"
        IRC_CC_WHITE       : "\x0300"
        IRC_CC_BLACK       : "\x0301"
        IRC_CC_BLUE        : "\x0302"
        IRC_CC_GREEN       : "\x0303"
        IRC_CC_RED         : "\x0304"
        IRC_CC_BROWN       : "\x0305"
        IRC_CC_PURPLE      : "\x0306"
        IRC_CC_ORANGE      : "\x0307"
        IRC_CC_YELLOW      : "\x0308"
        IRC_CC_TEAL        : "\x0310"
        IRC_CC_PINK        : "\x0313"
        IRC_CC_GREY        : "\x0314"
        IRC_CC_GRAY        : "\x0314"
        IRC_CC_LIGHT_BLUE  : "\x0312"
        IRC_CC_LIGHT_CYAN  : "\x0311"
        IRC_CC_CYAN        : "\x0311"
        IRC_CC_LIGHT_GREEN : "\x0309"
        IRC_CC_LIGHT_GRAY  : "\x0315"
        IRC_CC_LIGHT_GREY  : "\x0315"
        map_color_reset: "NORMAL"
        map_color_repo: 'BLUE'
        map_color_actor: 'ORANGE'
        map_color_number: 'GREEN'
        map_color_ref: 'GREEN'
        map_color_issue: 'GREEN'
        map_color_url: 'PINK'
        map_color_branch: 'GREEN'
        map_color_success: 'GREEN'
        map_color_failure: 'RED'
        map_color_cancelled: 'TEAL'
        map_color_insertion: 'GREEN'
        map_color_deletion: 'RED'
        map_color_modification: 'YELLOW'
    # Target: target-notifications
    - name: irc push (build messages)
      shell: bash
      run: |
          if ${{ toJSON(
                      fromJSON(inputs.target-notifications)
                   && github.event_name == 'push'
                   && (
                         github.repository_owner == inputs.repository_owner
                      || github.repository == inputs.repository
                      )
                 ) }}; then
            sudo apt-get install -y diffstat
            export commitnum="$( git show -s --oneline ${{ join(github.event.commits.*.id, ' ') }} | wc -l )"
            export committext="commits"
            if [ $commitnum -eq 1 ]; then
              export committext="commit"
            fi
            echo "commitnum=$commitnum" >> $GITHUB_ENV
            echo "committext=$committext" >> $GITHUB_ENV
            echo "commitstats=$( git show ${{ join(github.event.commits.*.id, ' ') }} | diffstat -ms | perl -npe 's/^ 0 files changed$/empty/; s/\s\d+ files? changed, //; s/(\d+) (\w+?)s?\((.)\)(, )?/$ENV{q|color_|.$2}$3$ENV{color_reset}$1/g' )" >> $GITHUB_ENV
            echo "commitmsg=$( git show -s --pretty='format:${{env.color_ref}}%h${{env.color_reset}} %s' ${{ github.event.head_commit.id }} )" >> $GITHUB_ENV
          fi
    - name: irc push
      shell: bash
      run: |
          if ${{ toJSON(
                      fromJSON(inputs.target-notifications)
                   && github.event_name == 'push'
                   && (
                         github.repository_owner == inputs.repository_owner
                      || github.repository == inputs.repository
                      )
                 ) }}; then
            echo "::group::IRC notification (push)"
            parallel -N0 -t --retries 3 --delay $(( 2 + $RANDOM % 6 )) node .github/actions/irc-message-action/app.js ::: 0
            echo "::endgroup::"
          fi
      env:
        INPUT_MESSAGE: |
          [${{env.color_repo}}${{env.SHORT_REPO}}${{env.color_reset}}] ${{ env.color_actor }}${{ github.actor }}${{ env.color_reset }} pushed ${{ env.color_number }}${{ env.commitnum }}${{ env.color_reset }} ${{ env.committext }} ${{ env.color_branch }}${{ github.event.ref }}${{ env.color_reset }} [${{ env.commitstats }}] ${{ env.commitmsg }} ${{env.color_url}}${{ github.event.compare }}${{env.color_reset}}
        # Common inputs for Gottox/irc-message-action@v2.1.1
        INPUT_CHANNEL: ${{ inputs.irc-channel }}
        INPUT_SERVER: ${{ inputs.irc-server }}
        INPUT_PORT: ${{ inputs.irc-port }}
        INPUT_NICKNAME: ${{ inputs.irc-nickname }}
        INPUT_TLS: ${{ inputs.irc-tls }}
        INPUT_NOTICE: ${{ inputs.irc-notice }}
        INPUT_EXCESS_FLOOD: ${{ inputs.irc-excess-flood }}
    - name: irc pull request
      shell: bash
      run: |
          if ${{ toJSON(
                   fromJSON(inputs.target-notifications)
                   && github.event_name == 'pull_request'
                   && (
                         github.repository_owner == inputs.repository_owner
                      || github.repository == inputs.repository
                      )
                 ) }}; then
            echo "::group::IRC notification (pull request)"
            parallel -N0 -t --retries 3 --delay $(( 2 + $RANDOM % 6 )) node .github/actions/irc-message-action/app.js ::: 0
            echo "::endgroup::"
          fi
      env:
        INPUT_MESSAGE: |
          [${{env.color_repo}}${{env.SHORT_REPO}}${{env.color_reset}}] ${{ env.color_actor }}${{ github.actor }}${{ env.color_reset }} ${{ github.event.action }} PR «${{ github.event.pull_request.title }}» ${{ env.color_url }}${{ github.event.pull_request.html_url }}${{ env.color_reset }}
        # Common inputs for Gottox/irc-message-action@v2.1.1
        INPUT_CHANNEL: ${{ inputs.irc-channel }}
        INPUT_SERVER: ${{ inputs.irc-server }}
        INPUT_PORT: ${{ inputs.irc-port }}
        INPUT_NICKNAME: ${{ inputs.irc-nickname }}
        INPUT_TLS: ${{ inputs.irc-tls }}
        INPUT_NOTICE: ${{ inputs.irc-notice }}
        INPUT_EXCESS_FLOOD: ${{ inputs.irc-excess-flood }}
    - name: irc tag created
      shell: bash
      run: |
          if ${{ toJSON(
                      fromJSON(inputs.target-notifications)
                   && github.event_name == 'create'
                   && github.event.ref_type == 'tag'
                   && (
                         github.repository_owner == inputs.repository_owner
                      || github.repository == inputs.repository
                      )
                 ) }}; then
            echo "::group::IRC notification (create tag)"
            parallel -N0 -t --retries 3 --delay $(( 2 + $RANDOM % 6 )) node .github/actions/irc-message-action/app.js ::: 0
            echo "::endgroup::"
          fi
      env:
        INPUT_MESSAGE: |
          [${{env.color_repo}}${{env.SHORT_REPO}}${{env.color_reset}}] ${{ env.color_actor }}${{ github.actor }}${{ env.color_reset }} tagged ${{ env.color_ref }}${{ github.event.ref }}${{ env.color_reset }}
        # Common inputs for Gottox/irc-message-action@v2.1.1
        INPUT_CHANNEL: ${{ inputs.irc-channel }}
        INPUT_SERVER: ${{ inputs.irc-server }}
        INPUT_PORT: ${{ inputs.irc-port }}
        INPUT_NICKNAME: ${{ inputs.irc-nickname }}
        INPUT_TLS: ${{ inputs.irc-tls }}
        INPUT_NOTICE: ${{ inputs.irc-notice }}
        INPUT_EXCESS_FLOOD: ${{ inputs.irc-excess-flood }}
    - name: irc issue
      shell: bash
      run: |
          if ${{ toJSON(
                      fromJSON(inputs.target-notifications)
                   && github.event_name == 'issues'
                   && (
                         github.repository_owner == inputs.repository_owner
                      || github.repository == inputs.repository
                      )
                 ) }}; then
            echo "::group::IRC notification (issue)"
            parallel -N0 -t --retries 3 --delay $(( 2 + $RANDOM % 6 )) node .github/actions/irc-message-action/app.js ::: 0
            echo "::endgroup::"
          fi
      env:
        INPUT_MESSAGE: |
          [${{env.color_repo}}${{env.SHORT_REPO}}${{env.color_reset}}] ${{ env.color_actor }}${{ github.actor }}${{ env.color_reset }} ${{ github.event.action }} issue ${{ env.color_number }}#${{ github.event.issue.number }}${{ env.color_reset }} ${{ env.color_url }}${{ github.event.issue.html_url }}${{ env.color_reset }}
        # Common inputs for Gottox/irc-message-action@v2.1.1
        INPUT_CHANNEL: ${{ inputs.irc-channel }}
        INPUT_SERVER: ${{ inputs.irc-server }}
        INPUT_PORT: ${{ inputs.irc-port }}
        INPUT_NICKNAME: ${{ inputs.irc-nickname }}
        INPUT_TLS: ${{ inputs.irc-tls }}
        INPUT_NOTICE: ${{ inputs.irc-notice }}
        INPUT_EXCESS_FLOOD: ${{ inputs.irc-excess-flood }}
    - name: irc comment
      shell: bash
      run: |
          if ${{ toJSON(
                      fromJSON(inputs.target-notifications)
                   && github.event_name == 'issue_comment'
                   && (
                         github.repository_owner == inputs.repository_owner
                      || github.repository == inputs.repository
                      )
                 ) }}; then
            echo "::group::IRC notification (issue comment)"
            parallel -N0 -t --retries 3 --delay $(( 2 + $RANDOM % 6 )) node .github/actions/irc-message-action/app.js ::: 0
            echo "::endgroup::"
          fi
      env:
        INPUT_MESSAGE: |
          [${{env.color_repo}}${{env.SHORT_REPO}}${{env.color_reset}}] ${{ env.color_actor }}${{ github.actor }}${{ env.color_reset }} ${{ github.event.review.state || 'commented' }} on ${{ env.color_number }}#${{ github.event.issue.number }}${{ env.color_reset }} ${{ env.color_url }}${{ github.event.comment.html_url || github.event.review.html_url }}${{ env.color_reset }}
        # Common inputs for Gottox/irc-message-action@v2.1.1
        INPUT_CHANNEL: ${{ inputs.irc-channel }}
        INPUT_SERVER: ${{ inputs.irc-server }}
        INPUT_PORT: ${{ inputs.irc-port }}
        INPUT_NICKNAME: ${{ inputs.irc-nickname }}
        INPUT_TLS: ${{ inputs.irc-tls }}
        INPUT_NOTICE: ${{ inputs.irc-notice }}
        INPUT_EXCESS_FLOOD: ${{ inputs.irc-excess-flood }}
    # Target: target-build-status
    - name: Set target-build-status conditional env
      shell: bash
      run: |
          echo "GHA_IRC_TARGET_BUILD_STATUS="${{
                  toJSON(
                       fromJSON(inputs.target-build-status)
                    && (
                          github.event_name == 'push'
                       || github.event_name == 'pull_request'
                       || (
                             github.event_name == 'create'
                          && github.event.ref_type == 'tag'
                          )
                       )
                       && (
                             github.repository_owner == inputs.repository_owner
                          || github.repository == inputs.repository
                          )
                  ) }} >> $GITHUB_ENV
    - name: Prepare message
      shell: bash
      if: fromJSON(env.GHA_IRC_TARGET_BUILD_STATUS)
      run: |
        if $GHA_IRC_TARGET_BUILD_STATUS; then
          echo "GITHUB_WORKFLOW_URL=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_ENV
          echo "commitmsg=$( git show -s --pretty='format:${{env.color_ref}}%h${{env.color_reset}} | ${{env.color_actor}}%an${{env.color_reset}} | %s' ${{ github.sha }} )" >> $GITHUB_ENV
          if ${{ toJSON( contains(fromJSON(inputs.needs).*.result, 'cancelled') ) }}; then
            echo "irc_msgpart_cancelled=${{ env.color_cancelled }} (& ∃ cancelled)${{ env.color_reset }}" >> $GITHUB_ENV
          else
            echo "irc_msgpart_cancelled=" >> $GITHUB_ENV
          fi
        fi
    - name: IRC build success
      shell: bash
      run: |
          if ${{ toJSON(
                      fromJSON(env.GHA_IRC_TARGET_BUILD_STATUS)
                   && (
                        ! contains(fromJSON(inputs.needs).*.result, 'failure')
                      )
                 ) }}; then
            echo "::group::IRC notification (build status: success)"
            parallel -N0 -t --retries 3 --delay $(( 2 + $RANDOM % 6 )) node .github/actions/irc-message-action/app.js ::: 0
            echo "::endgroup::"
          fi
      env:
        INPUT_MESSAGE: |
          [${{env.color_repo}}${{env.SHORT_REPO}}${{env.color_reset}}] [build/${{ github.event_name }}]: ${{env.color_success}}∀S ✓${{env.color_reset}}${{ env.irc_msgpart_cancelled }} ${{ env.commitmsg }} ${{env.color_url}}${{ env.GITHUB_WORKFLOW_URL }}${{env.color_reset}}
        # Common inputs for Gottox/irc-message-action@v2.1.1
        INPUT_CHANNEL: ${{ inputs.irc-channel }}
        INPUT_SERVER: ${{ inputs.irc-server }}
        INPUT_PORT: ${{ inputs.irc-port }}
        INPUT_NICKNAME: ${{ inputs.irc-nickname }}
        INPUT_TLS: ${{ inputs.irc-tls }}
        INPUT_NOTICE: ${{ inputs.irc-notice }}
        INPUT_EXCESS_FLOOD: ${{ inputs.irc-excess-flood }}
    - name: IRC build failure
      shell: bash
      run: |
          if ${{ toJSON(
                      fromJSON(env.GHA_IRC_TARGET_BUILD_STATUS)
                   && contains(fromJSON(inputs.needs).*.result, 'failure')
                 ) }}; then
            echo "::group::IRC notification (build status: failure)"
            parallel -N0 -t --retries 3 --delay $(( 2 + $RANDOM % 6 )) node .github/actions/irc-message-action/app.js ::: 0
            echo "::endgroup::"
          fi
      env:
        INPUT_MESSAGE: |
          [${{env.color_repo}}${{env.SHORT_REPO}}${{env.color_reset}}] [build/${{ github.event_name }}]: ${{env.color_failure}}∃F ✗${{env.color_reset}} ${{ env.commitmsg }} ${{env.color_url}}${{ env.GITHUB_WORKFLOW_URL }}${{env.color_reset}}
        # Common inputs for Gottox/irc-message-action@v2.1.1
        INPUT_CHANNEL: ${{ inputs.irc-channel }}
        INPUT_SERVER: ${{ inputs.irc-server }}
        INPUT_PORT: ${{ inputs.irc-port }}
        INPUT_NICKNAME: ${{ inputs.irc-nickname }}
        INPUT_TLS: ${{ inputs.irc-tls }}
        INPUT_NOTICE: ${{ inputs.irc-notice }}
        INPUT_EXCESS_FLOOD: ${{ inputs.irc-excess-flood }}
